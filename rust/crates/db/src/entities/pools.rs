//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "pools")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub token_a: Option<String>,
    pub token_b: Option<String>,
    pub fee: Decimal,
    pub dex: String,
    pub position_index: Option<i32>,
    pub updated_at: Option<DateTime>,
    #[sea_orm(column_type = "Double")]
    pub bonus_apr: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_day: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_week: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_month: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_prev_day: f64,
    #[sea_orm(column_type = "Double")]
    pub trading_apr: f64,
    #[sea_orm(column_type = "Double")]
    pub tvl: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::managed_positions::Entity")]
    ManagedPositions,
    #[sea_orm(has_many = "super::positions::Entity")]
    Positions,
    #[sea_orm(
        belongs_to = "super::tokens::Entity",
        from = "Column::TokenA",
        to = "super::tokens::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tokens2,
    #[sea_orm(
        belongs_to = "super::tokens::Entity",
        from = "Column::TokenB",
        to = "super::tokens::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tokens1,
}

impl Related<super::managed_positions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ManagedPositions.def()
    }
}

impl Related<super::positions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Positions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
