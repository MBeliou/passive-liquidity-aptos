//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub index: i32,
    #[sea_orm(unique)]
    pub address: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::managed_positions::Entity")]
    ManagedPositions,
    #[sea_orm(has_many = "super::user_balances::Entity")]
    UserBalances,
    #[sea_orm(has_many = "super::user_movements::Entity")]
    UserMovements,
}

impl Related<super::managed_positions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ManagedPositions.def()
    }
}

impl Related<super::user_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserBalances.def()
    }
}

impl Related<super::user_movements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserMovements.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_balances::Relation::Tokens.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_balances::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
