//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tokens")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub symbol: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub about: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub logo: Option<String>,
    pub decimals: i32,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_balances::Entity")]
    UserBalances,
}

impl Related<super::user_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserBalances.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_balances::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_balances::Relation::Tokens.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
